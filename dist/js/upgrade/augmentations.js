sand.define('augmentations/Seed', [
  'Seed'
], function(r) {

  r.Seed.augment({

    addClass : function(cl) {
      return $(this.el).addClass(cl);
    },

    removeClass : function(cl) {
      return $(this.el).removeClass(cl);
    },

    detachAll : function() {
      return this.detachObservers.apply(this, arguments);
    },

    '-init' : function(o) {
      if (o) {
        this._o = o;
        this._a = o.app || this._a || (o.super && o.super._a);
        this._super = o.super;

        if (this._a && this._a.dp) this._c = this._a.dp.collections;
      }
    }
  });

});

// Generated by CoffeeScript 1.9.3
(function() {
  sand.define('KspR/DatalistInput', ['Seed', 'DOM/toDOM'], function(r) {
    return r.Seed.extend({
      '+options': {
        input: null,
        data: null,
        parentNode: null
      },
      tpl: function() {
        return {
          tag: '.datalist'
        };
      },
      refresh: function() {
        var containerRect, one, str, targetRect;
        str = this.input.value.trim().toLowerCase();
        one = false;
        this.entries.each((function(_this) {
          return function(entry) {
            if (!str || ((entry.data.toLowerCase().search(str) !== -1) && entry.data.toLowerCase() !== str)) {
              one = true;
              return $(entry.el).show();
            } else {
              return $(entry.el).hide();
            }
          };
        })(this));
        if (!one) {
          return $(this.el).hide();
        } else {
          targetRect = this.input.getBoundingClientRect();
          containerRect = this.parentNode.getBoundingClientRect();
          this.el.style.width = targetRect.width + 'px';
          this.el.style.top = targetRect.top - containerRect.top + targetRect.height - 1 + 'px';
          this.el.style.left = targetRect.left - containerRect.left + 'px';
          return $(this.el).show();
        }
      },
      '+init': function() {
        this.entries = [];
        this.input.parentNode.appendChild(this.el);
        this.data.each(this.appendEntry.bind(this));
        this.parentNode.appendChild(this.el);
        this.input.addEventListener('focus', (function(_this) {
          return function(e) {
            return _this.refresh();
          };
        })(this));
        this.input.addEventListener('keydown', (function(_this) {
          return function(e) {
            return _this.refresh();
          };
        })(this));
        this.input.addEventListener('keyup', (function(_this) {
          return function(e) {
            return _this.refresh();
          };
        })(this));
        this.input.addEventListener('blur', (function(_this) {
          return function(e) {
            return $(_this.el).hide();
          };
        })(this));
        return $(this.el).hide();
      },
      appendEntry: function(d) {
        var el;
        el = r.toDOM({
          tag: '.entry ' + d,
          events: {
            mousedown: (function(_this) {
              return function() {
                _this.input.value = d;
                _this.input.blur();
                return _this.fire('pick');
              };
            })(this)
          }
        });
        this.entries.push({
          data: d,
          el: el
        });
        return this.el.appendChild(el);
      }
    });
  });

  sand.define('KspR/Checkbox', ['Seed', 'DOM/toDOM'], function(r) {
    return r.Seed.extend({
      '+options': {
        label: null,
        checked: false,
        filter: function() {
          return true;
        }
      },
      tpl: function() {
        return {
          tag: '.checkbox',
          children: [['.tick', ['.inner']], this.label ? '.label ' + this.label : null],
          events: {
            mousedown: (function(_this) {
              return function() {
                if (_this.filter()) {
                  return _this.toggle();
                }
              };
            })(this)
          }
        };
      },
      '+init': function(opts) {
        if (opts.checked) {
          return this.check({
            dontFire: true
          });
        }
      },
      toggle: function() {
        if (this.checked) {
          return this.uncheck();
        } else {
          return this.check();
        }
      },
      check: function(opts) {
        $(this.el).addClass('checked');
        this.checked = true;
        if (!(opts != null ? opts.dontFire : void 0)) {
          return this.fire('check');
        }
      },
      uncheck: function() {
        $(this.el).removeClass('checked');
        this.checked = false;
        return this.fire('uncheck');
      }
    });
  });

  sand.define('KspR/Selectbox', ['Seed', 'DOM/toDOM', 'DOM/onclickoutonce', 'DOM/parents'], function(r) {
    return r.Seed.extend({
      options: {
        dir: 'botttom',
        options: [],
        toggleDesc: null,
        tag: null,
        getPanelPosition: null,
        setPanelPosition: null,
        getFactor: null,
        shouldBlock: null,
        panelParent: null,
        async: false,
        getOptions: null,
        multiple: false
      },
      isSelectbox: true,
      getPanel: function(cb) {
        var buildPanel;
        buildPanel = (function(_this) {
          return function(options) {
            return cb(r.toDOM({
              tag: (_this.tag || '') + '.selectbox-panel',
              children: options.map(function(option) {
                var clone, el, events, key, ref, value;
                events = {
                  mousedown: function(e) {
                    _this.toggle(option, null, e);
                    if (!_this.multiple) {
                      _this.up();
                    }
                    return e.stopPropagation();
                  }
                };
                if (typeof option === 'string') {
                  el = r.toDOM({
                    tag: '.option ' + option,
                    events: events
                  });
                } else {
                  clone = {};
                  ref = option.elDesc;
                  for (key in ref) {
                    value = ref[key];
                    clone[key] = value;
                  }
                  clone.events = events;
                  el = r.toDOM(clone);
                }
                _this.$els.push({
                  el: el,
                  option: option
                });
                return el;
              })
            }));
          };
        })(this);
        if (this.async) {
          return this.getOptions(buildPanel);
        } else {
          if (!this.panel) {
            return buildPanel(this.options);
          } else {
            return cb(this.panel);
          }
        }
      },
      tpl: function() {
        var events;
        this.$els = [];
        events = {
          mousedown: (function(_this) {
            return function() {
              if (!_this._down) {
                return _this.down();
              }
            };
          })(this)
        };
        if (!this.async) {
          this.getPanel((function(_this) {
            return function(panel) {
              return _this.panel = panel;
            };
          })(this));
        }
        if (!this.toggleDesc) {
          this.$toggleEls = [];
          return {
            tag: (this.tag || '') + '.selectbox',
            children: this.options.map((function(_this) {
              return function(option) {
                var el;
                if (typeof option === 'string') {
                  el = r.toDOM({
                    tag: '.option ' + sanitize(option)
                  });
                } else {
                  el = r.toDOM(option.elDesc);
                }
                _this.$toggleEls.push({
                  el: el,
                  option: option
                });
                return el;
              };
            })(this)),
            events: events
          };
        } else {
          this.toggleDesc.events = events;
          return this.toggleDesc;
        }
      },
      '+init': function() {
        if (this.multiple) {
          this.selected = [];
        }
        if (this.async && !this.multiple) {
          return $(this.$toggleEls.last().el).addClass('selected');
        }
      },
      toggle: function(option, opts, e) {
        if (this.multiple) {
          if (this.selected.one('option', option)) {
            return this.unpick(option, opts, e);
          } else {
            return this.pick(option, opts, e);
          }
        } else {
          return this.pick(option, opts, e);
        }
      },
      pick: function(option, opts, e) {
        var elt;
        if (this.async) {
          if (this.multiple) {
            elt = this.$els.one('option', option);
            this.selected.push(elt);
            $(elt.el).addClass('selected');
          }
          if (!(opts != null ? opts.dontFire : void 0)) {
            return this.fire('pick', option, e);
          }
        } else {
          if (typeof option === 'string' || typeof option === 'number') {
            elt = this.$els.one(function(elt) {
              return elt.option.id === option || elt.option.value === option;
            });
            if (elt) {
              option = elt.option;
            } else {
              option = null;
            }
          }
          if (!this.multiple) {
            if (this.current) {
              $(this.current.el).removeClass('selected');
              if (this.$toggleEls) {
                $(this.$toggleEls.one('option', this.current.option).el).removeClass('selected');
              }
            }
          }
          if (option) {
            elt = this.$els.one('option', option);
            if (!this.multiple) {
              this.current = elt;
              $(elt.el).addClass('selected');
              if (this.$toggleEls) {
                $(this.$toggleEls.one('option', elt.option).el).addClass('selected');
              }
            } else {
              this.selected.push(elt);
              $(elt.el).addClass('selected');
            }
            if (!(opts != null ? opts.dontFire : void 0)) {
              return this.fire('pick', option, e);
            }
          }
        }
      },
      unpick: function(option, opts, e) {
        var elt;
        elt = this.$els.one('option', option);
        $(elt.el).removeClass('selected');
        this.selected.remove(elt);
        if (!(opts != null ? opts.dontFire : void 0)) {
          return this.fire('unpick', option, e);
        }
      },
      down: function() {
        if (typeof this.shouldBlock === "function" ? this.shouldBlock() : void 0) {
          return;
        }
        this._down = true;
        $(this.el).addClass('down');
        return this.getPanel((function(_this) {
          return function(panel) {
            var el, elRect, p, position, wh;
            _this.panel = panel;
            (_this.panelParent || _this.el.parentNode).appendChild(_this.panel);
            if (typeof _this.setPanelPosition === 'function') {
              _this.setPanelPosition(panel);
            } else if (typeof _this.getPanelPosition !== 'function') {
              panel.style.left = _this.el.offsetLeft + 'px';
              if (_this.dir !== 'top') {
                panel.style.top = _this.el.offsetTop + _this.el.offsetHeight + 'px';
              } else {
                panel.style.bottom = _this.el.offsetHeight + 'px';
              }
              panel = _this.panel;
              panel.style.visibility = 'hidden';
              el = panel;
              elRect = el.getBoundingClientRect();
              wh = $(window).height();
              if (elRect.top + elRect.height > wh) {
                p = (wh - elRect.height) - panel.parentNode.getBoundingClientRect().top;
                if (typeof _this.getFactor === 'function') {
                  p = p * _this.getFactor();
                }
                panel.style.top = p + 'px';
              }
              panel.style.visibility = null;
            } else {
              position = _this.getPanelPosition(_this.el);
              _this.panel.style.left = position[0] + 'px';
              _this.panel.style.top = position[1] + 'px';
            }
            _this.subon = r.onclickoutonce(_this.panel, _this.up.bind(_this), function(e) {
              if ((e.target === _this.el) || r.parents(_this.el, e.target)) {
                e.stopPropagation();
              }
              return true;
            });
            return _this.fire('down');
          };
        })(this));
      },
      up: function() {
        $(this.el).removeClass('down');
        this._down = false;
        $(this.panel).remove();
        if (this.subon) {
          this.subon.un();
          this.subon = null;
        }
        return this.fire('up');
      },
      '+destroy': function() {
        return $(this.panel).remove();
      }
    });
  });

  sand.define('KspR/SelectboxPlain', ['Seed', 'DOM/toDOM', 'DOM/onclickoutonce', 'DOM/parents', 'DOM/handle', 'KspR/Selectbox'], function(r) {
    return r.Seed.extend({
      options: {
        options: [],
        toggleDesc: null,
        tag: null,
        getPanelPosition: null,
        multiple: false
      },
      isSelectbox: true,
      tpl: function() {
        this.$els = [];
        return {
          tag: (this.tag || '') + '.selectbox-plain',
          children: this.options.map((function(_this) {
            return function(option) {
              var el;
              if (typeof option === 'string') {
                el = r.toDOM({
                  tag: '.option ' + sanitize(option)
                });
              } else {
                el = r.toDOM(option.elDesc);
              }
              r.handle(el).on('mousedown', function(e) {
                _this.toggle(option, null, e);
                if (_this.stopPropagation) {
                  return e.stopPropagation();
                }
              }, _this);
              _this.$els.push({
                el: el,
                option: option
              });
              return el;
            };
          })(this))
        };
      },
      toggle: r.Selectbox.prototype.toggle,
      unpick: r.Selectbox.prototype.unpick,
      '+init': function() {
        if (this.multiple) {
          return this.selected = [];
        }
      },
      pick: function(option, opts, e) {
        var elt;
        if (typeof option === 'string' || typeof option === 'number') {
          elt = this.$els.one(function(elt) {
            return elt.option.id === option || elt.option.value === option;
          });
          if (elt) {
            option = elt.option;
          } else {
            option = null;
          }
        }
        if (!this.multiple) {
          if (this.current) {
            $(this.current.el).removeClass('selected');
          }
        }
        if (option) {
          elt = this.$els.one('option', option);
          if (!this.multiple) {
            this.current = elt;
            $(elt.el).addClass('selected');
            if (this.$toggleEls) {
              $(this.$toggleEls.one('option', elt.option).el).addClass('selected');
            }
          } else {
            this.selected.push(elt);
            $(elt.el).addClass('selected');
          }
          if (!(opts != null ? opts.dontFire : void 0)) {
            return this.fire('pick', option, e);
          }
        }
      }
    });
  });

}).call(this);