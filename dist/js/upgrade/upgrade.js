// Generated by CoffeeScript 1.9.3
(function() {
  var taxList;

  taxList = {
    'BE': 21,
    'BG': 20,
    'CZ': 21,
    'DK': 25,
    'DE': 19,
    'EE': 20,
    'IE': 23,
    'GR': 24,
    'ES': 21,
    'FR': 20,
    'HR': 25,
    'IT': 22,
    'CY': 19,
    'LV': 21,
    'LT': 21,
    'LU': 17,
    'HU': 27,
    'MT': 18,
    'NL': 21,
    'AT': 20,
    'PL': 23,
    'PT': 23,
    'RO': 19,
    'SI': 22,
    'SK': 20,
    'FI': 24,
    'SE': 25,
    'GB': 20
  };

  sand.define('PaymentStepper', ['Seed', 'DOM/toDOM', 'PaymentMethodBloc', 'KspR/SelectboxPlain'], function(r) {
    var PLANS, _lang, card, shouldSendMethod;
    _lang = lang.limitations['upgrade-popup'];
    shouldSendMethod = null;
    card = null;
    PLANS = {
      'pro-monthly': {
        price: 10
      },
      'pro-yearly': {
        price: 100
      }
    };
    return r.Seed.extend({
      tpl: function() {
        this.trace = [];
        this.stripe = Stripe(this._a.config.stripe.public_key);
        return {
          tag: '.popup10.popup-upgrade.popup-upgrade-big',
          children: [
            [
              '.top-row', [
                {
                  tag: '.close.do-close x',
                  events: {
                    mousedown: (function(_this) {
                      return function() {
                        return _this.query('track', 'close-upgrade-popup', {
                          from: 'x',
                          trace: _this.trace
                        });
                      };
                    })(this)
                  }
                }, '.title'
              ]
            ], '.content', '.bottom-row'
          ]
        };
      },
      steps: [
        {
          id: 'select-plan',
          title: _lang['select-plan'].title,
          buildContent: function() {
            var content, plans;
            plans = [
              {
                id: 'pro',
                label: 'Pro',
                price: {
                  amount: '10€'
                },
                yearly: {
                  price: {
                    amount: '8.34€'
                  }
                },
                cta: {
                  label: lang.limitations['over-quota'].upgrade.capitalize(),
                  mousedown: (function(_this) {
                    return function() {
                      _this.selectedPlan = 'pro-' + (_this.yearly ? 'yearly' : 'monthly');
                      return _this.to('edit-payment-info');
                    };
                  })(this)
                }
              }, {
                id: 'team',
                label: 'Team',
                price: {
                  amount: (js.user.lang === 'fr' ? 'De 3 à 10€*' : 'From 10€*')
                },
                yearly: {
                  price: {
                    amount: (js.user.lang === 'fr' ? 'De ' : '') + '2.50€ ' + lang.general.to + ' 8.34€*'
                  }
                },
                cta: {
                  elDesc: {
                    tag: 'a.cta ' + lang.general['contact-us'].capitalize(),
                    attr: {
                      href: 'mailto:hi@draft.io?subject=' + encodeURIComponent(_lang['select-plan']['contact-us-subject'])
                    },
                    style: "text-decoration:none"
                  }
                }
              }
            ];
            content = this.content.appendChild(r.toDOM([
              '.plans' + (this.yearly ? '.yearly' : ''), [
                [
                  '.period-alt', [
                    '.period-monthly ' + _lang['select-plan']['pay-monthly'], {
                      tag: '.container',
                      children: ['.inner'],
                      events: {
                        mousedown: (function(_this) {
                          return function() {
                            if (_this.yearly) {
                              $(content).removeClass('yearly');
                            } else {
                              $(content).addClass('yearly');
                            }
                            return _this.yearly = !_this.yearly;
                          };
                        })(this)
                      }
                    }, '.period-yearly ' + _lang['select-plan']['pay-annually'], '.save ' + _lang['select-plan']['pay-annually-save']
                  ]
                ]
              ].concat(plans.map((function(_this) {
                return function(p) {
                  var desc;
                  p.teaser = _lang['select-plan'][p.id].teaser;
                  p.features = _lang['select-plan'][p.id].features.split(',');
                  p.price.adds = _lang['select-plan'][p.id]['price-adds'].split(',');
                  desc = [
                    '.plan.' + p.id, [
                      '.title ' + p.label, '.teaser ' + p.teaser, [
                        '.price-bloc', [
                          '.price ' + p.price.amount, [
                            '.adds', p.price.adds.map(function(a) {
                              return {
                                tag: '.add ' + a
                              };
                            })
                          ]
                        ]
                      ], [
                        '.price-bloc.yearly', [
                          '.price ' + p.yearly.price.amount, [
                            '.adds', p.price.adds.map(function(a) {
                              return {
                                tag: '.add ' + a
                              };
                            })
                          ]
                        ]
                      ], p.cta.elDesc ? p.cta.elDesc : {
                        tag: '.cta ' + p.cta.label,
                        events: {
                          mousedown: p.cta.mousedown.bind(_this)
                        }
                      }, [
                        'ul.features', p.features.map(function(f) {
                          return 'li.feature ' + f;
                        })
                      ]
                    ]
                  ];
                  if (p.id === 'team') {
                    desc[1].push(['.ast *' + _lang['select-plan'][p.id].ast]);
                  }
                  return desc;
                };
              })(this)))
            ]));
            return $(this['bottom-row']).find('.cta').remove();
          }
        }, {
          id: 'edit-payment-info',
          cta: {
            label: _lang['edit-payment-info'].cta,
            mousedown: function() {
              return true;
            }
          },
          title: _lang['edit-payment-info'].title,
          buildContent: function() {
            var address, appendCardForm, countryCode, countryCodes, cta, i, infos, j, key, map, paymentMethodBloc, possibilities, possibility, radio, ref, ref1, ref2, ref3, ref4, ref5, refreshForm, refreshVATField, value;
            this.content.appendChild(r.toDOM('#errors'));
            this.content.appendChild(r.toDOM(".billing-information.bloc0 \n<div class=\"bloc0-title\">\n	<div class=\"number\">1</div>\n	<div class=\"label\">" + _lang['edit-payment-info']['billing-information'] + "</div>\n</div>\n<div class=\"bloc identifier-bloc\">\n	<div class=\"bloc1\">\n		<div class=\"radio-container\"></div>\n	</div>\n	<div class=\"bloc1 bloc1-full-name\">\n		<label for=\"full-name\">" + _lang['edit-payment-info']['full-name'] + "</label>\n		<input id=\"full-name\" />\n	</div>\n	<div class=\"bloc1 split-bloc bloc1-company\">\n		<label for=\"company-name\">" + _lang['edit-payment-info']['company-name'] + "</label>\n		<label for=\"vat-number\">" + _lang['edit-payment-info']['vat-number'] + "</label>\n		<input id=\"company-name\" />\n		<input id=\"vat-number\" />\n	</div>\n</div>\n<div class=\"bloc address-bloc\">\n	<label for=\"line1\">" + _lang['edit-payment-info'].address + "</label>\n	<input id=\"line1\" />\n\n	<div class=\"triple-bloc\">\n		<label for=\"postal-code\">" + _lang['edit-payment-info']['zip-code'] + "</label>\n		<label for=\"city\">" + _lang['edit-payment-info'].city + "</label>\n		<label for=\"country\">" + _lang['edit-payment-info'].country + "</label>\n\n		<input id=\"postal-code\" />\n		<input id=\"city\" />\n		<div class=\"select-wrapper\">\n				<select id=\"country\">\n					<option value=\"AF\">Afghanistan</option>\n					<option value=\"AX\">Åland Islands</option>\n					<option value=\"AL\">Albania</option>\n					<option value=\"DZ\">Algeria</option>\n					<option value=\"AS\">American Samoa</option>\n					<option value=\"AD\">Andorra</option>\n					<option value=\"AO\">Angola</option>\n					<option value=\"AI\">Anguilla</option>\n					<option value=\"AQ\">Antarctica</option>\n					<option value=\"AG\">Antigua and Barbuda</option>\n					<option value=\"AR\">Argentina</option>\n					<option value=\"AM\">Armenia</option>\n					<option value=\"AW\">Aruba</option>\n					<option value=\"AU\">Australia</option>\n					<option value=\"AT\">Austria</option>\n					<option value=\"AZ\">Azerbaijan</option>\n					<option value=\"BS\">Bahamas</option>\n					<option value=\"BH\">Bahrain</option>\n					<option value=\"BD\">Bangladesh</option>\n					<option value=\"BB\">Barbados</option>\n					<option value=\"BY\">Belarus</option>\n					<option value=\"BE\">Belgium</option>\n					<option value=\"BZ\">Belize</option>\n					<option value=\"BJ\">Benin</option>\n					<option value=\"BM\">Bermuda</option>\n					<option value=\"BT\">Bhutan</option>\n					<option value=\"BO\">Bolivia, Plurinational State of</option>\n					<option value=\"BQ\">Bonaire, Sint Eustatius and Saba</option>\n					<option value=\"BA\">Bosnia and Herzegovina</option>\n					<option value=\"BW\">Botswana</option>\n					<option value=\"BV\">Bouvet Island</option>\n					<option value=\"BR\">Brazil</option>\n					<option value=\"IO\">British Indian Ocean Territory</option>\n					<option value=\"BN\">Brunei Darussalam</option>\n					<option value=\"BG\">Bulgaria</option>\n					<option value=\"BF\">Burkina Faso</option>\n					<option value=\"BI\">Burundi</option>\n					<option value=\"KH\">Cambodia</option>\n					<option value=\"CM\">Cameroon</option>\n					<option value=\"CA\">Canada</option>\n					<option value=\"CV\">Cape Verde</option>\n					<option value=\"KY\">Cayman Islands</option>\n					<option value=\"CF\">Central African Republic</option>\n					<option value=\"TD\">Chad</option>\n					<option value=\"CL\">Chile</option>\n					<option value=\"CN\">China</option>\n					<option value=\"CX\">Christmas Island</option>\n					<option value=\"CC\">Cocos (Keeling) Islands</option>\n					<option value=\"CO\">Colombia</option>\n					<option value=\"KM\">Comoros</option>\n					<option value=\"CG\">Congo</option>\n					<option value=\"CD\">Congo, the Democratic Republic of the</option>\n					<option value=\"CK\">Cook Islands</option>\n					<option value=\"CR\">Costa Rica</option>\n					<option value=\"CI\">Côte d'Ivoire</option>\n					<option value=\"HR\">Croatia</option>\n					<option value=\"CU\">Cuba</option>\n					<option value=\"CW\">Curaçao</option>\n					<option value=\"CY\">Cyprus</option>\n					<option value=\"CZ\">Czech Republic</option>\n					<option value=\"DK\">Denmark</option>\n					<option value=\"DJ\">Djibouti</option>\n					<option value=\"DM\">Dominica</option>\n					<option value=\"DO\">Dominican Republic</option>\n					<option value=\"EC\">Ecuador</option>\n					<option value=\"EG\">Egypt</option>\n					<option value=\"SV\">El Salvador</option>\n					<option value=\"GQ\">Equatorial Guinea</option>\n					<option value=\"ER\">Eritrea</option>\n					<option value=\"EE\">Estonia</option>\n					<option value=\"ET\">Ethiopia</option>\n					<option value=\"FK\">Falkland Islands (Malvinas)</option>\n					<option value=\"FO\">Faroe Islands</option>\n					<option value=\"FJ\">Fiji</option>\n					<option value=\"FI\">Finland</option>\n					<option value=\"FR\">France</option>\n					<option value=\"GF\">French Guiana</option>\n					<option value=\"PF\">French Polynesia</option>\n					<option value=\"TF\">French Southern Territories</option>\n					<option value=\"GA\">Gabon</option>\n					<option value=\"GM\">Gambia</option>\n					<option value=\"GE\">Georgia</option>\n					<option value=\"DE\">Germany</option>\n					<option value=\"GH\">Ghana</option>\n					<option value=\"GI\">Gibraltar</option>\n					<option value=\"GR\">Greece</option>\n					<option value=\"GL\">Greenland</option>\n					<option value=\"GD\">Grenada</option>\n					<option value=\"GP\">Guadeloupe</option>\n					<option value=\"GU\">Guam</option>\n					<option value=\"GT\">Guatemala</option>\n					<option value=\"GG\">Guernsey</option>\n					<option value=\"GN\">Guinea</option>\n					<option value=\"GW\">Guinea-Bissau</option>\n					<option value=\"GY\">Guyana</option>\n					<option value=\"HT\">Haiti</option>\n					<option value=\"HM\">Heard Island and McDonald Islands</option>\n					<option value=\"VA\">Holy See (Vatican City State)</option>\n					<option value=\"HN\">Honduras</option>\n					<option value=\"HK\">Hong Kong</option>\n					<option value=\"HU\">Hungary</option>\n					<option value=\"IS\">Iceland</option>\n					<option value=\"IN\">India</option>\n					<option value=\"ID\">Indonesia</option>\n					<option value=\"IR\">Iran, Islamic Republic of</option>\n					<option value=\"IQ\">Iraq</option>\n					<option value=\"IE\">Ireland</option>\n					<option value=\"IM\">Isle of Man</option>\n					<option value=\"IL\">Israel</option>\n					<option value=\"IT\">Italy</option>\n					<option value=\"JM\">Jamaica</option>\n					<option value=\"JP\">Japan</option>\n					<option value=\"JE\">Jersey</option>\n					<option value=\"JO\">Jordan</option>\n					<option value=\"KZ\">Kazakhstan</option>\n					<option value=\"KE\">Kenya</option>\n					<option value=\"KI\">Kiribati</option>\n					<option value=\"KP\">Korea, Democratic People's Republic of</option>\n					<option value=\"KR\">Korea, Republic of</option>\n					<option value=\"KW\">Kuwait</option>\n					<option value=\"KG\">Kyrgyzstan</option>\n					<option value=\"LA\">Lao People's Democratic Republic</option>\n					<option value=\"LV\">Latvia</option>\n					<option value=\"LB\">Lebanon</option>\n					<option value=\"LS\">Lesotho</option>\n					<option value=\"LR\">Liberia</option>\n					<option value=\"LY\">Libya</option>\n					<option value=\"LI\">Liechtenstein</option>\n					<option value=\"LT\">Lithuania</option>\n					<option value=\"LU\">Luxembourg</option>\n					<option value=\"MO\">Macao</option>\n					<option value=\"MK\">Macedonia, the former Yugoslav Republic of</option>\n					<option value=\"MG\">Madagascar</option>\n					<option value=\"MW\">Malawi</option>\n					<option value=\"MY\">Malaysia</option>\n					<option value=\"MV\">Maldives</option>\n					<option value=\"ML\">Mali</option>\n					<option value=\"MT\">Malta</option>\n					<option value=\"MH\">Marshall Islands</option>\n					<option value=\"MQ\">Martinique</option>\n					<option value=\"MR\">Mauritania</option>\n					<option value=\"MU\">Mauritius</option>\n					<option value=\"YT\">Mayotte</option>\n					<option value=\"MX\">Mexico</option>\n					<option value=\"FM\">Micronesia, Federated States of</option>\n					<option value=\"MD\">Moldova, Republic of</option>\n					<option value=\"MC\">Monaco</option>\n					<option value=\"MN\">Mongolia</option>\n					<option value=\"ME\">Montenegro</option>\n					<option value=\"MS\">Montserrat</option>\n					<option value=\"MA\">Morocco</option>\n					<option value=\"MZ\">Mozambique</option>\n					<option value=\"MM\">Myanmar</option>\n					<option value=\"NA\">Namibia</option>\n					<option value=\"NR\">Nauru</option>\n					<option value=\"NP\">Nepal</option>\n					<option value=\"NL\">Netherlands</option>\n					<option value=\"NC\">New Caledonia</option>\n					<option value=\"NZ\">New Zealand</option>\n					<option value=\"NI\">Nicaragua</option>\n					<option value=\"NE\">Niger</option>\n					<option value=\"NG\">Nigeria</option>\n					<option value=\"NU\">Niue</option>\n					<option value=\"NF\">Norfolk Island</option>\n					<option value=\"MP\">Northern Mariana Islands</option>\n					<option value=\"NO\">Norway</option>\n					<option value=\"OM\">Oman</option>\n					<option value=\"PK\">Pakistan</option>\n					<option value=\"PW\">Palau</option>\n					<option value=\"PS\">Palestinian Territory, Occupied</option>\n					<option value=\"PA\">Panama</option>\n					<option value=\"PG\">Papua New Guinea</option>\n					<option value=\"PY\">Paraguay</option>\n					<option value=\"PE\">Peru</option>\n					<option value=\"PH\">Philippines</option>\n					<option value=\"PN\">Pitcairn</option>\n					<option value=\"PL\">Poland</option>\n					<option value=\"PT\">Portugal</option>\n					<option value=\"PR\">Puerto Rico</option>\n					<option value=\"QA\">Qatar</option>\n					<option value=\"RE\">Réunion</option>\n					<option value=\"RO\">Romania</option>\n					<option value=\"RU\">Russian Federation</option>\n					<option value=\"RW\">Rwanda</option>\n					<option value=\"BL\">Saint Barthélemy</option>\n					<option value=\"SH\">Saint Helena, Ascension and Tristan da Cunha</option>\n					<option value=\"KN\">Saint Kitts and Nevis</option>\n					<option value=\"LC\">Saint Lucia</option>\n					<option value=\"MF\">Saint Martin (French part)</option>\n					<option value=\"PM\">Saint Pierre and Miquelon</option>\n					<option value=\"VC\">Saint Vincent and the Grenadines</option>\n					<option value=\"WS\">Samoa</option>\n					<option value=\"SM\">San Marino</option>\n					<option value=\"ST\">Sao Tome and Principe</option>\n					<option value=\"SA\">Saudi Arabia</option>\n					<option value=\"SN\">Senegal</option>\n					<option value=\"RS\">Serbia</option>\n					<option value=\"SC\">Seychelles</option>\n					<option value=\"SL\">Sierra Leone</option>\n					<option value=\"SG\">Singapore</option>\n					<option value=\"SX\">Sint Maarten (Dutch part)</option>\n					<option value=\"SK\">Slovakia</option>\n					<option value=\"SI\">Slovenia</option>\n					<option value=\"SB\">Solomon Islands</option>\n					<option value=\"SO\">Somalia</option>\n					<option value=\"ZA\">South Africa</option>\n					<option value=\"GS\">South Georgia and the South Sandwich Islands</option>\n					<option value=\"SS\">South Sudan</option>\n					<option value=\"ES\">Spain</option>\n					<option value=\"LK\">Sri Lanka</option>\n					<option value=\"SD\">Sudan</option>\n					<option value=\"SR\">Suriname</option>\n					<option value=\"SJ\">Svalbard and Jan Mayen</option>\n					<option value=\"SZ\">Swaziland</option>\n					<option value=\"SE\">Sweden</option>\n					<option value=\"CH\">Switzerland</option>\n					<option value=\"SY\">Syrian Arab Republic</option>\n					<option value=\"TW\">Taiwan, Province of China</option>\n					<option value=\"TJ\">Tajikistan</option>\n					<option value=\"TZ\">Tanzania, United Republic of</option>\n					<option value=\"TH\">Thailand</option>\n					<option value=\"TL\">Timor-Leste</option>\n					<option value=\"TG\">Togo</option>\n					<option value=\"TK\">Tokelau</option>\n					<option value=\"TO\">Tonga</option>\n					<option value=\"TT\">Trinidad and Tobago</option>\n					<option value=\"TN\">Tunisia</option>\n					<option value=\"TR\">Turkey</option>\n					<option value=\"TM\">Turkmenistan</option>\n					<option value=\"TC\">Turks and Caicos Islands</option>\n					<option value=\"TV\">Tuvalu</option>\n					<option value=\"UG\">Uganda</option>\n					<option value=\"UA\">Ukraine</option>\n					<option value=\"AE\">United Arab Emirates</option>\n					<option value=\"GB\">United Kingdom</option>\n					<option value=\"US\">United States</option>\n					<option value=\"UM\">United States Minor Outlying Islands</option>\n					<option value=\"UY\">Uruguay</option>\n					<option value=\"UZ\">Uzbekistan</option>\n					<option value=\"VU\">Vanuatu</option>\n					<option value=\"VE\">Venezuela, Bolivarian Republic of</option>\n					<option value=\"VN\">Viet Nam</option>\n					<option value=\"VG\">Virgin Islands, British</option>\n					<option value=\"VI\">Virgin Islands, U.S.</option>\n					<option value=\"WF\">Wallis and Futuna</option>\n					<option value=\"EH\">Western Sahara</option>\n					<option value=\"YE\">Yemen</option>\n					<option value=\"ZM\">Zambia</option>\n					<option value=\"ZW\">Zimbabwe</option>\n				</select>\n			<div class=\"triangle\">▼</div>\n		</div>\n	</div>\n\n</div>"));
            radio = this.create(r.SelectboxPlain, {
              options: [
                {
                  id: 'business',
                  elDesc: ['.option', [['.checkbox', ['.inner']], '.label ' + _lang['edit-payment-info'].business]]
                }, {
                  id: 'individual',
                  elDesc: ['.option', [['.checkbox', ['.inner']], '.label ' + _lang['edit-payment-info'].individual]]
                }
              ]
            });
            refreshForm = (function(_this) {
              return function() {
                if (radio.current.option.id === 'business') {
                  $(_this.content).find('.bloc1-full-name').hide();
                  return $(_this.content).find('.bloc1-company').show();
                } else {
                  $(_this.content).find('.bloc1-full-name').show();
                  return $(_this.content).find('.bloc1-company').hide();
                }
              };
            })(this);
            radio.on('pick', refreshForm);
            radio.pick(((ref = this._a.user.billing_infos) != null ? ref.customer_type : void 0) || 'business');
            this.radio = radio;
            $(this.content).find('.radio-container').append(radio.el);
            this.content.appendChild(r.toDOM(['.bloc0', [['.bloc0-title', ['.number 2', '.label ' + _lang['edit-payment-info']['payment-method'].title]], '.card-bloc']]));
            appendCardForm = (function(_this) {
              return function() {
                var elements;
                $(_this.el).find('.card-bloc').append(r.toDOM("div \n<!-- Used to display Element errors. -->\n<div id=\"card-errors\" role=\"alert\"></div>\n\n<div class=\"input-bloc\">\n	<label for=\"card-element\">\n		" + _lang['edit-payment-info']['payment-method']['credit-or-debit-card'] + "\n	</label>\n	<div id=\"card-element\">\n		<!-- A Stripe Element will be inserted here. -->\n	</div>\n</div>\n\n<div class=\"input-bloc\">\n	<label for=\"name-on-card\">" + _lang['edit-payment-info']['payment-method']['cardholders-name'] + "</label>\n	<input id=\"name-on-card\" />\n</div>"));
                elements = _this.stripe.elements();
                card = elements.create('card', {
                  style: {
                    base: {
                      fontSize: '15px',
                      fontFamily: 'futura',
                      fontSmoothing: 'antialiased',
                      color: '#222'
                    }
                  }
                });
                card.mount($(_this.el).find('#card-element').get(0));
                return shouldSendMethod = true;
              };
            })(this);
            shouldSendMethod = false;
            if (this._a.user.payment_method) {
              paymentMethodBloc = this.create(r.PaymentMethodBloc, {
                onchange: (function(_this) {
                  return function() {
                    $(paymentMethodBloc.el).remove();
                    appendCardForm();
                    return $(_this.el).find('.card-bloc').append(r.toDOM({
                      tag: '.cancel ' + _lang['edit-payment-info']['payment-method'].cancel,
                      events: {
                        mousedown: function() {
                          $(_this.el).find('.card-bloc').html('');
                          $(_this.el).find('.card-bloc').append(paymentMethodBloc.el);
                          return shouldSendMethod = false;
                        }
                      }
                    }));
                  };
                })(this)
              });
              $(this.el).find('.card-bloc').append(paymentMethodBloc.el);
            } else {
              shouldSendMethod = true;
              appendCardForm();
            }
            if (this._a.user.billing_infos) {
              infos = this._a.user.billing_infos;
              address = infos.address;
              map = {
                'line1': address.line1,
                'postal-code': address.postal_code,
                city: address.city
              };
              if (this._a.user.billing_infos.customer_type === 'business') {
                map['company-name'] = infos.name;
                map['vat-number'] = infos.eu_vat;
              } else {
                map['full-name'] = infos.name;
              }
              for (key in map) {
                value = map[key];
                if (value) {
                  $(this.el).find('#' + key).val(value);
                }
              }
            }
            countryCodes
            countryCode = 'FR';
            possibilities = window.navigator.language.split('-');
            if ((ref1 = this._a.user.billing_infos) != null ? (ref2 = ref1.address) != null ? ref2.country : void 0 : void 0) {
              possibilities.push((ref3 = this._a.user.billing_infos) != null ? (ref4 = ref3.address) != null ? ref4.country : void 0 : void 0);
            }
            for (i = j = ref5 = possibilities.length - 1; ref5 <= 0 ? j <= 0 : j >= 0; i = ref5 <= 0 ? ++j : --j) {
              possibility = possibilities[i].toUpperCase();
              if (countryCodes.include(possibility)) {
                countryCode = possibility;
                break;
              }
            }
            $(this.el).find('select').get(0).selectedIndex = $(this.el).find('select').find('[value=' + countryCode + ']').index();
            refreshVATField = (function(_this) {
              return function() {
                var country;
                country = $(_this.el).find('#country').val().trim();
                if (!taxList[country]) {
                  $(_this.el).find('#vat-number').val('');
                  $(_this.el).find('label[for=vat-number]').hide();
                  return $(_this.el).find('#vat-number').hide();
                } else {
                  $(_this.el).find('#vat-number').show();
                  return $(_this.el).find('label[for=vat-number]').show();
                }
              };
            })(this);
            $(this.el).find('select').get(0).onchange = refreshVATField;
            refreshVATField();
            cta = $(this.el).find('.cta').get(0);
            return cta.addEventListener('pointerdown', (function(_this) {
              return function() {
                var billing_infos, country, valid, validateForm;
                billing_infos = {};
                if (_this.radio.current.option.id === 'business') {
                  billing_infos.name = $(_this.el).find('#company-name').val().trim();
                  if ($(_this.el).find('#vat-number').val().trim()) {
                    billing_infos.eu_vat = $(_this.el).find('#vat-number').val().trim();
                  }
                } else {
                  billing_infos.name = $(_this.el).find('#full-name').val().trim();
                }
                billing_infos.customer_type = _this.radio.current.option.id;
                billing_infos.address = {
                  line1: $(_this.el).find('#line1').val().trim(),
                  postal_code: $(_this.el).find('#postal-code').val().trim(),
                  city: $(_this.el).find('#city').val(),
                  country: $(_this.el).find('#country').val().trim()
                };
                if (billing_infos.customer_type === 'business') {
                  valid = function(vat) {
                    var reg;
                    reg = /^((AT)?U[0-9]{8}|(BE)?0[0-9]{9}|(BG)?[0-9]{9,10}|(CY)?[0-9]{8}L|(CZ)?[0-9]{8,10}|(DE)?[0-9]{9}|(DK)?[0-9]{8}|(EE)?[0-9]{9}|(EL|GR)?[0-9]{9}|(ES)?[0-9A-Z][0-9]{7}[0-9A-Z]|(FI)?[0-9]{8}|(FR)?[0-9A-Z]{2}[0-9]{9}|(GB)?([0-9]{9}([0-9]{3})?|[A-Z]{2}[0-9]{3})|(HU)?[0-9]{8}|(IE)?[0-9]S[0-9]{5}L|(IT)?[0-9]{11}|(LT)?([0-9]{9}|[0-9]{12})|(LU)?[0-9]{8}|(LV)?[0-9]{11}|(MT)?[0-9]{8}|(NL)?[0-9]{9}B[0-9]{2}|(PL)?[0-9]{10}|(PT)?[0-9]{9}|(RO)?[0-9]{2,10}|(SE)?[0-9]{12}|(SI)?[0-9]{8}|(SK)?[0-9]{10})$/;
                    return reg.exec(vat.replace(/[^A-Z0-9]/g, ''));
                  };
                  country = $(_this.el).find('#country').val().trim();
                  if (taxList[country]) {
                    if (!billing_infos.eu_vat) {
                      $(_this.el).find('#errors').html(_lang['edit-payment-info'].errors['vat-cannot-be-blank']);
                      return;
                    }
                    if (!valid(billing_infos.eu_vat)) {
                      $(_this.el).find('#errors').html(_lang['edit-payment-info'].errors['invalid-vat-number']);
                      return;
                    }
                  }
                }
                if (!billing_infos.name || !billing_infos.address.line1 || !billing_infos.address.postal_code || !billing_infos.address.city) {
                  $(_this.el).find('#errors').html(_lang['edit-payment-info'].errors['required-fields-missing']);
                  return;
                }
                $(cta).addClass('spin');
                validateForm = function(data) {
                  data.billing_infos = billing_infos;
                  data.authenticity_token = $('meta[name=csrf-token]').attr('content');
                  return $.ajax({
                    type: 'POST',
                    url: '/api/payment/create_or_update_customer',
                    data: data,
                    error: function() {
                      $(cta).removeClass('spin');
                      return $(_this.el).find('#errors').html('Internal server error');
                    },
                    success: function(resp) {
                      $(cta).removeClass('spin');
                      if (!resp.error) {
                        _this._a.user.billing_infos = data.billing_infos;
                        return _this.to('review-order');
                      } else {
                        return $(_this.el).find('#errors').html(resp.error);
                      }
                    }
                  });
                };
                _this._a.user.billing_infos = billing_infos;
                _this._a.user.payment_method = {
                  card: {
                    brand: 'mastercard',
                    exp_month: 5,
                    exp_year: 2023,
                    last4: 1234
                  },
                  name_on_card: 'Eric Cartman'
                };
                _this.to('review-order');
                return;
                if (shouldSendMethod) {
                  return _this.stripe.createPaymentMethod({
                    type: 'card',
                    card: card
                  }).then(function(result) {
                    if (result.error) {
                      document.getElementById('card-errors').textContent = result.error.message;
                      return $(cta).removeClass('spin');
                    } else {
                      _this._a.user.payment_method = result.paymentMethod;
                      _this._a.user.payment_method.name_on_card = $(_this.el).find('#name-on-card').val();
                      return validateForm(result);
                    }
                  });
                } else {
                  return validateForm({});
                }
              };
            })(this));
          }
        }, {
          id: 'review-order',
          cta: {
            label: _lang['review-order'].cta,
            mousedown: function() {
              $(this.el).find('.cta').addClass('spin');
              return $.ajax({
                type: 'POST',
                url: '/api/payment/subscribe',
                data: {
                  plan: this.selectedPlan,
                  authenticity_token: $('meta[name=csrf-token]').attr('content')
                },
                error: (function(_this) {
                  return function() {
                    $(_this.el).find('.cta').removeClass('spin');
                    return $(_this.el).find('#errors').html('Internal server error');
                  };
                })(this),
                success: (function(_this) {
                  return function(resp) {
                    $(_this.el).find('.cta').removeClass('spin');
                    if (!resp.error) {
                      if (resp.status === 'requires_action') {
                        return _this.stripe.confirmCardPayment(resp.client_secret).then(function(result) {
                          if (result.error) {
                            return $(_this.el).find('#errors').html(result.error.message);
                          } else {
                            return _this.fire('success', resp);
                          }
                        });
                      } else if (resp.status === 'success') {
                        return _this.fire('success', resp);
                      }
                    } else {
                      return $(_this.el).find('#errors').html(resp.error);
                    }
                  };
                })(this)
              });
            }
          },
          title: _lang['review-order'].title,
          buildContent: function() {
            var HT, tax, total;
            if (this._a.user.billing_infos.customer_type === 'business') {
              if (this._a.user.billing_infos.address.country === 'FR') {
                tax = taxList['FR'];
              } else {
                tax = 0;
              }
            } else {
              tax = taxList[this._a.user.billing_infos.address.country] || 0;
            }
            HT = PLANS[this.selectedPlan].price;
            total = HT + (HT * tax / 100);
            return this.content.appendChild(r.toDOM([
              '.review-order', [
                '#errors', [
                  '.split-bloc', [
                    ['.sub', ['.title ' + _lang['edit-payment-info']['billing-information'], 'div ' + this._a.user.billing_infos.name, this._a.user.billing_infos.eu_vat ? 'div ' + this._a.user.billing_infos.eu_vat : null, 'div ' + this._a.user.billing_infos.address.line1, 'div ' + this._a.user.billing_infos.address.postal_code + ' ' + this._a.user.billing_infos.address.city]], [
                      '.sub', [
                        '.title ' + _lang['edit-payment-info']['payment-method'].title, this.create(r.PaymentMethodBloc, {
                          changeable: false
                        }).el
                      ]
                    ]
                  ]
                ], ['.bloc', ['.title ' + _lang['review-order'].plan, 'div Pro']], ['.bloc.amount', ['.title ' + _lang['review-order']['amount-to-pay'], ['table', [['tr', ['td ' + _lang['review-order']['amount-ht'], 'td ' + HT + '.00€']], ['tr', ['td Taxes (' + tax + '%)', 'td ' + (HT * tax / 100).toFixed(2) + '€']], ['tr', ['td ' + _lang['review-order']['amount-ttc'], 'td ' + total.toFixed(2) + '€']]]]]], ['.bloc.precisions', ['div ' + _lang['review-order']['precisions'].replace('%total%', total).replace('%period%', _lang['review-order'].period[this.selectedPlan.split('-')[1]])]]
              ]
            ]));
          }
        }
      ],
      to: function(id, data) {
        var index, step;
        this.trace.push('to-' + id);
        step = this.steps.one('id', id);
        index = this.steps.indexOf(step);
        this.title.innerHTML = step.title;
        this.el.scrollTop = 0;
        this['bottom-row'].innerHTML = '';
        if (index !== 0) {
          this['bottom-row'].appendChild(r.toDOM({
            tag: '.cta-ultra-light ← ' + _lang[id].back,
            events: {
              mousedown: (function(_this) {
                return function() {
                  return _this.to(_this.steps[index - 1].id);
                };
              })(this)
            }
          }));
        }
        if (step.cta) {
          this['bottom-row'].appendChild(r.toDOM({
            tag: '.cta',
            children: ['.cta-label ' + step.cta.label, '.cta-spinner'],
            events: {
              mousedown: step.cta.mousedown.bind(this)
            }
          }));
        }
        this.content.innerHTML = '';
        return step.buildContent.call(this);
      },
      '+init': function() {
        return this.to('select-plan');
      }
    });
  });

  sand.define('PaymentMethodBloc', ['Seed'], function(r) {
    return r.Seed.extend({
      '+options': {
        onchange: null,
        changeable: true
      },
      tpl: function() {
        return [
          '.payment-method', [
            '.card-brand.card-' + (['amex', 'mastercard', 'visa'].include(this._a.user.payment_method.card.brand) ? this._a.user.payment_method.card.brand : 'unknown'), ['.card-details', ['.number_safe •••• •••• •••• ' + this._a.user.payment_method.card.last4, '.name-on-card ' + this._a.user.payment_method.name_on_card, '.expires_at ' + lang['payment-method']['expires-at'] + ' ' + (this._a.user.payment_method.card.exp_month / 100).toFixed(2).split('.')[1] + '/' + this._a.user.payment_method.card.exp_year]], this.changeable ? {
              tag: '.change ' + lang.general.change.capitalize(),
              events: {
                mousedown: this.onchange.bind(this)
              }
            } : null
          ]
        ];
      }
    });
  });

  sand.require('augmentations/Seed', 'PaymentStepper', 'core/Array/*', (function(_this) {
    return function(r) {
      var app, stepper;
      app = {
        user: {},
        config: {
          stripe: {
            public_key: 'a'
          }
        }
      };
      window.js = {
        user: {
          lang: 'en'
        }
      };
      stepper = new r.PaymentStepper({
        app: app
      });
      return document.body.appendChild(stepper.el);
    };
  })(this));

}).call(this);
