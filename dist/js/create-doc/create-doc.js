// Generated by CoffeeScript 1.9.3
(function() {
  sand.define('CreateDoc/TemplatePicker/Menu', ['Seed', 'templates', 'DOM/toDOM'], function(r) {
    var TEMPLATES_CONF;
    TEMPLATES_CONF = [
      {
        id: 'agile-artifacts',
        title: lang.discover['agile-artifacts'],
        entries: ["user-story-mapping", "kanban-board", "scrum-board", "pi-planning-board", "program-board", "portfolio-kanban"]
      }, {
        id: 'strategy-and-roadmapping',
        title: lang.discover['strategy-and-roadmapping'],
        entries: ["twelve-month-roadmap", "impact-mapping", "okr-framework"]
      }, {
        id: 'product-management',
        title: lang.discover['product-management'],
        entries: ["example-mapping", "persona", "customer-journey-mapping", "hypothesis-table", "event-modeling", "empathy-map", "moscow-method"]
      }, {
        id: 'agile-retrospectives',
        title: lang.discover['agile-retrospectives'],
        entries: ["start-stop-continue-retrospective", "speedboat-retrospective", "starfish-retrospective", "fourls-retrospective", "three-little-pigs-retrospective", "timeline-retrospective", "esvp-retrospective", "learning-matrix", "planning-poker", "extreme-quotation", "niko-niko-calendar", "roam-board"]
      }, {
        id: 'creativity-and-innovation',
        title: lang.discover['creativity-and-innovation'],
        entries: ["lotus-blossom-technique"]
      }, {
        title: lang.templates['strategic-analysis'],
        entries: ['prioritization-matrix', 'swot-matrix', 'pestel-analysis-framework']
      }, {
        title: lang.discover['canvas'],
        entries: ["business-model-canvas", "lean-startup-canvas", "value-proposition-canvas", "product-vision-board", "the-go-product-roadmap"]
      }
    ];
    return r.Seed.extend({
      tpl: function() {
        var buildEntry;
        this.elts = [];
        buildEntry = (function(_this) {
          return function(entry) {
            var el, label;
            label = entry.label;
            if (label === "Rétrospective Start/Stop/Continue") {
              label = 'Start/Stop/Continue';
            }
            if (label === "Start/Stop/Continue Retrospective") {
              label = 'Start/Stop/Continue';
            }
            if (label === "Rétrospective de l'Etoile de Mer") {
              label = 'Etoile de Mer';
            }
            if (label === 'Cartographie du parcours client') {
              label = 'Cartographie parcours client';
            }
            el = r.toDOM({
              tag: '.' + entry.id.replace('12', 'twelve').replace('4', 'four') + '.entry',
              children: ['.preview', '.label ' + label],
              events: {
                mousedown: function() {
                  return _this.pick(entry.id);
                }
              }
            });
            _this.elts.push({
              el: el,
              entry: entry,
              id: entry.id
            });
            return el;
          };
        })(this);
        return {
          tag: '.template-picker-menu',
          children: [
            {
              tag: '.wrapper',
              style: 'touch-action:initial;',
              children: [
                {
                  tag: '.container',
                  children: [
                    [
                      '.bloc-catgories', TEMPLATES_CONF.map((function(_this) {
                        return function(c) {
                          return '.category ' + c.title;
                        };
                      })(this))
                    ], [
                      '.bloc-all', [
                        [
                          '.bloc-entries', [
                            '.bloc-title Basic', [
                              '.entries', [
                                buildEntry({
                                  id: 'blank',
                                  label: lang.templates.blank
                                }), buildEntry({
                                  id: 'empty-draft-plus-title',
                                  label: lang.templates['empty-draft-plus-title']
                                }), buildEntry({
                                  id: 'empty-draft-plus-title-plus-lists',
                                  label: lang.templates['empty-draft-plus-title-plus-lists']
                                })
                              ]
                            ]
                          ]
                        ]
                      ].concat(TEMPLATES_CONF.map(function(elt) {
                        return [
                          '.bloc-entries', [
                            '.bloc-title ' + elt.title, [
                              '.entries', elt.entries.map(function(id) {
                                if (!r.templates[id]) {
                                  return 'div';
                                }
                                return buildEntry({
                                  id: id,
                                  label: r.templates[id].label
                                });
                              })
                            ]
                          ]
                        ];
                      }))
                    ]
                  ]
                }
              ]
            }
          ]
        };
      },
      pick: function(id) {
        var now;
        now = Date.now();
        if (this.current && this.current.id === id) {
          if (this.lastDowntime && (now - this.lastDowntime < 350)) {
            this["super"].createDoc();
            return;
          }
        }
        this.lastDowntime = now;
        if (this.current) {
          $(this.current.el).removeClass('selected');
        }
        this.current = this.elts.one('id', id);
        return $(this.current.el).addClass('selected');
      },
      cancel: function() {
        this.fire('cancel');
        return this["super"].up();
      }
    });
  });

  sand.define('CreateDoc', ['DOM/toDOM', 'Seed', 'MoveTo', 'Geo/R4', 'CreateDoc/TemplatePicker/Menu', 'DOM/onclickoutonce', 'DOM/parents', 'templates'], function(r) {
    return r.Seed.extend({
      '+options': {
        targetFolder: null,
        db: null
      },
      tpl: function() {
        if (this.targetFolder) {
          if (!['manager', 'content-manager', 'contributor'].include(this.targetFolder.permission)) {
            this.targetFolder = null;
          }
        }
        return {
          tag: '.create-doc',
          children: [
            [
              '.blocs', [
                [
                  '.bloc.bloc-name', [
                    '.bloc-label ' + lang.popups['new-draft'].name, [
                      '.bloc-content', [
                        {
                          tag: 'input.field',
                          attr: {
                            value: lang.popups['new-draft'].untitled
                          }
                        }
                      ]
                    ]
                  ]
                ], {
                  tag: '.bloc.bloc-location',
                  children: [
                    '.bloc-label ' + lang.popups['new-draft'].folder, {
                      tag: '.bloc-content',
                      children: ['.name']
                    }, '.bloc-change ' + lang.popups['new-draft']['change-location']
                  ],
                  events: {
                    mousedown: (function(_this) {
                      return function() {
                        _this.moveTo = _this.create(r.MoveTo, {
                          folder: _this.targetFolder || js.config.user.root_id,
                          db: _this.db,
                          ctaLabel: 'choose'
                        });
                        _this.moveTo.on('destroy', function() {
                          return _this.moveTo = null;
                        }, _this);
                        _this.moveTo.on('move', function(folder) {
                          _this.targetFolder = folder;
                          _this.query('memory2').set('current_folder_id', folder.id);
                          _this.moveTo.destroy();
                          return _this.refreshLocation();
                        }, _this);
                        return document.body.appendChild(_this.moveTo.el);
                      };
                    })(this)
                  }
                }, ['.bloc.bloc-template', ['.bloc-label ' + lang.popups['new-draft'].template, this.create(r.Menu, null, 'templatePicker').el]]
              ]
            ], {
              tag: '.cta ' + lang.general.create.toUpperCase(),
              events: {
                mousedown: (function(_this) {
                  return function() {
                    return _this.createDoc();
                  };
                })(this)
              }
            }, {
              tag: '.cancel ' + lang.general.cancel,
              events: {
                mousedown: this.destroy.bind(this)
              }
            }
          ]
        };
      },
      createDoc: function() {
        var ref;
        this.query('createDoc', {
          title: this.field.value.trim(),
          folder_id: (ref = this.targetFolder) != null ? ref.id : void 0
        }, (function(_this) {
          return function(draft) {
            var data, ref1, template;
            template = (ref1 = _this.templatePicker) != null ? ref1.current.id : void 0;
            _this.query('track', 'create_doc', {
              template: template || null,
              id: draft.dp.docs.last().id,
              guest: js.user.guest
            });
            if (!(template && (template !== 'blank'))) {
              return;
            }
            data = r.templates[template].data;
            if (!data) {
              return;
            }
            _this.query('track', 'create-template', {
              id: template
            });
            console.log('draft multipleSelect paste');
            return draft.multipleSelect.paste(data, {
              setCflAsFalse: true,
              fromRestore: true
            });
          };
        })(this));
        return this.destroy();
      },
      refreshLocation: function() {
        if (this.targetFolder) {
          if (this.targetFolder.shared) {
            $(this.location).addClass('shared');
          } else {
            $(this.location).removeClass('shared');
          }
        }
        if (this.targetFolder) {
          return this.name.innerHTML = sanitize(this.getStrPath(this.targetFolder));
        } else {
          return this.name.innerHTML = '/';
        }
      },
      getStrPath: function(folder) {
        var db, folders, pushFolder;
        db = this.db;
        folders = [];
        pushFolder = function(folder) {
          if (folder.special_type === 'root') {
            return;
          }
          folders.push(folder);
          if (folder.folder_id) {
            return pushFolder(db.items.find(folder.folder_id));
          }
        };
        pushFolder(folder);
        folders.push(folder);
        if (folders.length > 2) {
          return '/.../' + folder.name;
        } else if (folders.length === 2) {
          return '/' + folder.name;
        } else {
          return '/';
        }
      },
      getFullPath: function(folder) {
        var addPrefix, db, str;
        str = '';
        db = this.db;
        addPrefix = function(folder) {
          if (folder.special_type === 'root') {
            return;
          }
          str = folder.name + '/' + str;
          if (folder.folder_id) {
            return addPrefix(db.items.find(folder.folder_id));
          }
        };
        addPrefix(folder);
        str = str.slice(0, str.length - 1);
        return '/' + str;
      },
      '+init': function() {
        var kd, newTab;
        this.refreshLocation();
        newTab = $('.header .new-tab').get(0);
        document.body.appendChild(this.el);
        $(this.field).focus().select();
        setTimeout((function(_this) {
          return function() {
            return $(_this.field).focus().select();
          };
        })(this), 0);
        this.templatePicker.pick('blank');
        this.subons = [
          r.onclickoutonce(this.el, (function(_this) {
            return function(e) {
              if ((e.target === newTab) || r.parents(newTab, e.target)) {
                e.stopPropagation();
              }
              return _this.destroy();
            };
          })(this), (function(_this) {
            return function(e) {
              var ref;
              if (_this.moveTo) {
                if (r.parents(_this.moveTo.el, e.target) || e.target === _this.moveTo.el) {
                  return false;
                }
              }
              if ((ref = _this.templatePicker) != null ? ref.menu : void 0) {
                if (r.parents(_this.templatePicker.menu.el, e.target) || e.target === _this.templatePicker.menu.el) {
                  return false;
                }
              }
              return true;
            };
          })(this))
        ];
        kd = (function(_this) {
          return function(e) {
            if (e.keyCode === 27) {
              return _this.destroy();
            }
          };
        })(this);
        document.addEventListener('keydown', kd, true);
        return this.subons.push({
          un: function() {
            return document.removeEventListener('keydown', kd, true);
          }
        });
      },
      '+destroy': function() {
        var ref;
        return (ref = this.subons) != null ? ref.send('un') : void 0;
      }
    });
  });

  sand.define('templates', function() {
    var _templates;
    _templates = window.templates;
    return templates;
  });

  sand.require('CreateDoc', 'core/Array/*', (function(_this) {
    return function(r) {
      return new r.CreateDoc;
    };
  })(this));

}).call(this);
