// Generated by CoffeeScript 2.5.1
(function() {
  sand.define('CreateDoc/TemplatePicker/Menu', ['Seed', 'templates', 'DOM/toDOM'], function(r) {
    var TEMPLATES_CONF;
    TEMPLATES_CONF = [
      {
        id: 'agile-artifacts',
        title: lang.discover['agile-artifacts'],
        entries: ["user-story-mapping",
      "kanban-board",
      "scrum-board",
      "pi-planning-board",
      "program-board",
      "portfolio-kanban"]
      },
      {
        id: 'strategy-and-roadmapping',
        title: lang.discover['strategy-and-roadmapping'],
        entries: ["twelve-month-roadmap",
      "impact-mapping",
      "okr-framework"]
      },
      {
        id: 'product-management',
        title: lang.discover['product-management'],
        entries: ["example-mapping",
      "persona",
      "customer-journey-mapping",
      "hypothesis-table",
      "event-modeling",
      "empathy-map",
      "moscow-method"]
      },
      {
        id: 'agile-retrospectives',
        title: lang.discover['agile-retrospectives'],
        entries: ["start-stop-continue-retrospective",
      "speedboat-retrospective",
      "starfish-retrospective",
      "fourls-retrospective",
      "three-little-pigs-retrospective",
      "timeline-retrospective",
      "esvp-retrospective",
      "learning-matrix",
      "planning-poker",
      "extreme-quotation",
      "niko-niko-calendar",
      "roam-board"]
      },
      {
        id: 'creativity-and-innovation',
        title: lang.discover['creativity-and-innovation'],
        entries: ["lotus-blossom-technique"]
      },
      {
        title: lang.templates['strategic-analysis'],
        entries: ['prioritization-matrix',
      'swot-matrix',
      'pestel-analysis-framework']
      },
      {
        title: lang.discover['canvas'],
        entries: ["business-model-canvas",
      "lean-startup-canvas",
      "value-proposition-canvas",
      "product-vision-board",
      "the-go-product-roadmap"]
      }
    ];
    return r.Seed.extend({
      tpl: function() {
        var buildEntry;
        this.elts = [];
        buildEntry = (entry) => {
          var el, label;
          label = entry.label;
          if (label === "Rétrospective Start/Stop/Continue") {
            label = 'Start/Stop/Continue';
          }
          if (label === "Start/Stop/Continue Retrospective") {
            label = 'Start/Stop/Continue';
          }
          if (label === "Rétrospective de l'Etoile de Mer") {
            label = 'Etoile de Mer';
          }
          if (label === 'Cartographie du parcours client') {
            label = 'Cartographie parcours client';
          }
          el = r.toDOM({
            tag: '.' + entry.id.replace('12', 'twelve').replace('4', 'four') + '.entry',
            children: ['.preview', '.label ' + label],
            events: {
              mousedown: () => {
                return this.pick(entry.id);
              }
            }
          });
          this.elts.push({
            el: el,
            entry: entry,
            id: entry.id
          });
          return el;
        };
        return {
          tag: '.template-picker-menu',
          children: [
            {
              tag: '.wrapper',
              style: 'touch-action:initial;',
              children: [
                {
                  tag: '.container',
                  children: [
                    [
                      '.bloc-catgories',
                      TEMPLATES_CONF.map((c) => {
                        return '.category ' + c.title;
                      })
                    ],
                    [
                      '.bloc-all',
                      [
                        [
                          '.bloc-entries',
                          [
                            '.bloc-title Basic', //todo translate
                            [
                              '.entries',
                              [
                                buildEntry({
                                  id: 'blank',
                                  label: lang.templates.blank
                                }),
                                buildEntry({
                                  id: 'empty-draft-plus-title',
                                  label: lang.templates['empty-draft-plus-title']
                                }),
                                buildEntry({
                                  id: 'empty-draft-plus-title-plus-lists',
                                  label: lang.templates['empty-draft-plus-title-plus-lists']
                                })
                              ]
                            ]
                          ]
                        ]
                      ].concat(TEMPLATES_CONF.map(function(elt) {
                        return [
                          '.bloc-entries',
                          [
                            '.bloc-title ' + elt.title,
                            [
                              '.entries',
                              elt.entries.map(function(id) {
                                if (!r.templates[id]) {
                                  return 'div';
                                }
                                return buildEntry({
                                  id: id,
                                  label: r.templates[id].label
                                });
                              })
                            ]
                          ]
                        ];
                      }))
                    ]
                  ]
                }
              ]
            }
          ]
        };
      },
      pick: function(id) {
        var now;
        now = Date.now();
        if (this.current && this.current.id === id) {
          if (this.lastDowntime && (now - this.lastDowntime < 350)) {
            this.super.createDoc();
            return;
          }
        }
        this.lastDowntime = now;
        if (this.current) {
          $(this.current.el).removeClass('selected');
        }
        this.current = this.elts.one('id', id);
        return $(this.current.el).addClass('selected');
      },
      cancel: function() {
        this.fire('cancel');
        return this.super.up();
      }
    });
  });

  sand.define('CreateDoc', ['DOM/toDOM', 'Seed', 'MoveTo', 'Geo/R4', 'CreateDoc/TemplatePicker/Menu', 'DOM/onclickoutonce', 'DOM/parents', 'templates'], function(r) {
    return r.Seed.extend({
      '+options': {
        targetFolder: null,
        db: null
      },
      tpl: function() {
        if (this.targetFolder) {
          if (!['manager', 'content-manager', 'contributor'].include(this.targetFolder.permission)) {
            this.targetFolder = null;
          }
        }
        return {
          tag: '.app-modal-wrapper.create-doc.app-new-draft-modal',
          style: 'display:flex;',
          children: [
            {
              tag: '.app-modal.medium',
              children: [
                {
                  tag: 'header',
                  children: ['h2 New draft',
                'button.btn.close +']
                },
                {
                  tag: '.body',
                  children: [
                    [
                      '.wrapper',
                      [
                        [
                          '.blocs',
                          [
                            [
                              '.left-bloc',
                              [
                                [
                                  '.bloc.bloc-name',
                                  [
                                    '.bloc-label ' + lang.popups['new-draft'].name,
                                    [
                                      '.bloc-content',
                                      [
                                        {
                                          tag: 'input.field',
                                          attr: {
                                            value: lang.popups['new-draft'].untitled
                                          }
                                        }
                                      ]
                                    ]
                                  ]
                                ],
                                {
                                  tag: '.bloc.bloc-location',
                                  children: [
                                    '.bloc-label ' + lang.popups['new-draft'].folder,
                                    {
                                      tag: '.bloc-content',
                                      // '.picto'
                                      children: ['.name']
                                    },
                                    '.bloc-change ' + lang.popups['new-draft']['change-location']
                                  ],
                                  events: {
                                    mousedown: () => {
                                      this.moveTo = this.create(r.MoveTo,
                                {
                                        folder: this.targetFolder || js.config.user.root_id,
                                        db: this.db,
                                        ctaLabel: 'choose'
                                      });
                                      this.moveTo.on('destroy',
                                () => {
                                        return this.moveTo = null;
                                      },
                                this);
                                      this.moveTo.on('move',
                                (folder) => {
                                        this.targetFolder = folder;
                                        this.query('memory2').set('current_folder_id',
                                folder.id);
                                        this.moveTo.destroy();
                                        return this.refreshLocation();
                                      },
                                this);
                                      return document.body.appendChild(this.moveTo.el);
                                    }
                                  }
                                }
                              ]
                            ],
                            [
                              '.bloc.bloc-template',
                              [
                                //'nav.bloc-label ' + lang.popups['new-draft'].template
                                'nav.bloc-label ' + 'Draft templates &nbsp;&nbsp;&nbsp; My templates &nbsp;&nbsp;&nbsp; Team templates',
                                // @create(r.TemplatePicker, null, 'templatePicker').el
                                ['.wrapper',
                                ['nav.sub-wrapper ' + 'Basic<br>Stratégie et planification<br>Etc.',
                                this.create(r.Menu,
                                null,
                                'templatePicker').el]]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                },
                {
                  tag: 'footer',
                  children: [
                    {
                      tag: 'button.btn.cancel Cancel',
                      events: {
                        mousedown: this.destroy.bind(this)
                      }
                    },
                    {
                      tag: 'button.btn.submit Create',
                      events: {
                        mousedown: this.createDoc.bind(this)
                      }
                    }
                  ]
                }
              ]
            },
            {
              tag: '.cta ' + lang.general.create.toUpperCase(),
              events: {
                mousedown: () => {
                  // @query('createDoc', title : @field.value.trim(), folder_id : @targetFolder.id)
                  return this.createDoc();
                }
              }
            }
          ]
        };
      },
      createDoc: function() {
        var ref;
        this.query('createDoc', {
          title: this.field.value.trim(),
          folder_id: (ref = this.targetFolder) != null ? ref.id : void 0
        }, (draft) => {
          var data, ref1, template;
          template = (ref1 = this.templatePicker) != null ? ref1.current.id : void 0;
          this.query('track', 'create_doc', {
            template: template || null,
            id: draft.dp.docs.last().id,
            guest: js.user.guest
          });
          if (!(template && (template !== 'blank'))) {
            return;
          }
          data = r.templates[template].data;
          if (!data) {
            return;
          }
          // data.vertices.forEach((v) -> v.cfl = false )
          this.query('track', 'create-template', {
            id: template
          });
          console.log('draft multipleSelect paste');
          return draft.multipleSelect.paste(data, {
            setCflAsFalse: true,
            fromRestore: true //, #null, null, true)
          });
        });
        
        //RY draft.coffee
        // xMin = null
        // yMin = null
        // draft.dp.vertices.all.each (v) ->
        // 	if v.tm.rect
        // 		if (typeof(xMin) isnt 'number') or (v.tm.rect[0][0] < xMin)
        // 			xMin = v.tm.rect[0][0]
        // 		if (typeof(yMin) isnt 'number') or (v.tm.rect[0][1] < yMin)
        // 			yMin = v.tm.rect[0][1]
        // xMin ||= 0
        // yMin ||= 0

        // center = [xMin, yMin].add(draft.viewport.rects.client.getValue()[1].divide(2)).minus([100, 100]);
        // draft.viewport.move center : center

        // if [
        // 	"user-story-mapping"
        // 	"impact-mapping"
        // 	'prioritization-matrix'
        // 	"speed-boat-retrospective"
        // 	"starfish-retrospective"
        // 	"timeline-retrospective"
        // 	"learning-matrix"
        // 	"fourls-retrospective"
        // ].include template
        // 	@query 'openPopup', {
        // 		elDesc : {
        // 			tag : '.popup7'
        // 			children : [
        // 				'.do-close.close x'
        // 				'.title Deactivating magnetization'
        // 				'.msg Have you tried deactivating lists [i] to enjoy more freedom?'
        // 				'.do-close.send-button OK'
        // 			]
        // 		}
        // 	}
        return this.destroy();
      },
      refreshLocation: function() {
        if (this.targetFolder) {
          if (this.targetFolder.shared) {
            $(this.location).addClass('shared');
          } else {
            $(this.location).removeClass('shared');
          }
        }
        if (this.targetFolder) {
          return this.name.innerHTML = sanitize(this.getStrPath(this.targetFolder)); //@getFullPath(@targetFolder)
        } else {
          return this.name.innerHTML = '/';
        }
      },
      getStrPath: function(folder) {
        var db, folders, pushFolder;
        db = this.db;
        folders = [];
        pushFolder = function(folder) {
          if (folder.special_type === 'root') {
            return;
          }
          folders.push(folder);
          if (folder.folder_id) {
            return pushFolder(db.items.find(folder.folder_id));
          }
        };
        pushFolder(folder);
        folders.push(folder);
        if (folders.length > 2) {
          return '/.../' + folder.name;
        } else if (folders.length === 2) {
          return '/' + folder.name;
        } else {
          return '/';
        }
      },
      getFullPath: function(folder) {
        var addPrefix, db, str;
        str = '';
        db = this.db;
        addPrefix = function(folder) {
          if (folder.special_type === 'root') {
            return;
          }
          str = folder.name + '/' + str;
          if (folder.folder_id) {
            return addPrefix(db.items.find(folder.folder_id));
          }
        };
        addPrefix(folder);
        str = str.slice(0, str.length - 1);
        return '/' + str;
      },
      '+init': function() {
        var kd, newTab;
        this.refreshLocation();
        newTab = $('.header .new-tab').get(0);
        // rect = newTab.getBoundingClientRect()

        // @el.style.left = rect.left + rect.width / 2 - 298 / 2 - 5 + 'px'
        document.body.appendChild(this.el);
        // rect = @el.getBoundingClientRect()
        // rect = new r.R4([[rect.left, rect.top], [rect.width, rect.height]])
        // containerRect = new r.R4([[7, 0], [$(window).width() - 14, $(window).height()]])

        // newRect = rect.forcedIn(containerRect)
        // value = newRect.getValue()
        // @el.style.left = value[0][0] + value[1][0] / 2 - 298 / 2 - 5 + 'px'

        // delta = newRect.getCenter().minus(rect.getCenter())
        // $(@el).find('.triangle-top').css('margin-left', -delta[0] + 'px')
        $(this.field).focus().select();
        setTimeout(() => {
          return $(this.field).focus().select();
        }, 0);
        this.templatePicker.pick('blank');
        this.subons = [
          r.onclickoutonce(this.el,
          (e) => {
            if ((e.target === newTab) || r.parents(newTab,
          e.target)) {
              e.stopPropagation();
            }
            return this.destroy();
          },
          (e) => {
            var ref;
            if (this.moveTo) {
              if (r.parents(this.moveTo.el,
          e.target) || e.target === this.moveTo.el) {
                return false;
              }
            }
            if ((ref = this.templatePicker) != null ? ref.menu : void 0) {
              if (r.parents(this.templatePicker.menu.el,
          e.target) || e.target === this.templatePicker.menu.el) {
                return false;
              }
            }
            return true;
          })
        ];
        kd = (e) => {
          if (e.keyCode === 27) {
            return this.destroy();
          }
        };
        document.addEventListener('keydown', kd, true);
        return this.subons.push({
          un: function() {
            return document.removeEventListener('keydown', kd, true);
          }
        });
      },
      '+destroy': function() {
        var ref;
        return (ref = this.subons) != null ? ref.send('un') : void 0;
      }
    });
  });

  sand.define('templates', function() {
    var _templates;
    _templates = window.templates;
    return templates;
  });

  sand.require('CreateDoc', 'core/Array/*', (r) => {
    return new r.CreateDoc();
  });

}).call(this);
