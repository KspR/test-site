// Generated by CoffeeScript 1.9.3
(function() {
  exports.buildTranslations = function(cb) {
    var cp, deepen, files, fs;
    fs = require('fs');
    cp = require('child_process');
    deepen = function(o) {
      var k, key, oo, part, parts, t, v;
      oo = {};
      for (k in o) {
        v = o[k];
        t = oo;
        parts = k.split('.');
        key = parts.pop();
        while (parts.length) {
          part = parts.shift();
          t = t[part] = t[part] || {};
        }
        t[key] = o[k];
      }
      return oo;
    };
    files = fs.readdirSync('src/lang');
    files.forEach(function(e) {
      var buffer, i, inTranslation, indent, j, keys, l, langs, line, lines, m, mode, n, nextIndent, raw, ref, ref1, ref2;
      if (/\.translations$/.exec(e)) {
        raw = fs.readFileSync('./src/lang/' + e).toString();
        lines = raw.split('\n');
        lines = lines.map(function(line) {
          var i, indent, len, res;
          res = {};
          indent = 0;
          len = line.length;
          i = 0;
          while (i < len) {
            if (line.charAt(i) === '\t') {
              indent++;
            } else {
              if (line.charAt(i) === '#') {
                res.comment = true;
              }
              break;
            }
            i++;
          }
          res.text = line.replace(/\t/g, '');
          res.indent = indent;
          return res;
        }).filter(function(line) {
          return !line.comment;
        });
        keys = [];
        langs = [{}, {}];
        mode = null;
        buffer = '';
        for (i = l = 0, ref = lines.length; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {
          line = lines[i];
          if (line.text && line.text.trim()) {
            line.text = line.text.replace(/\r/, '');
            if (mode !== 'multi') {
              if (/^------/.exec(line.text)) {
                mode = 'multi';
                inTranslation = 0;
                buffer = '';
              } else {
                indent = line.indent;
                if (lines[i + 1]) {
                  nextIndent = lines[i + 1].indent;
                  if (nextIndent === indent) {
                    if (!inTranslation) {
                      langs[0][keys.join('.')] = line.text;
                      inTranslation = 1;
                    } else {
                      langs[inTranslation][keys.join('.')] = line.text;
                      inTranslation++;
                    }
                  } else {
                    if (typeof inTranslation === 'number') {
                      langs[inTranslation][keys.join('.')] = line.text;
                      inTranslation = false;
                    }
                    if (nextIndent > indent) {
                      keys.push(line.text);
                    } else {
                      for (j = m = 0, ref1 = indent - nextIndent; 0 <= ref1 ? m < ref1 : m > ref1; j = 0 <= ref1 ? ++m : --m) {
                        keys.pop();
                      }
                    }
                  }
                } else {
                  langs[inTranslation][keys.join('.')] = line.text;
                }
              }
            } else {
              if (/^------/.exec(line.text)) {
                langs[inTranslation][keys.join('.')] = buffer;
                mode = null;
                inTranslation = false;
                indent = line.indent;
                if (lines[i + 1]) {
                  nextIndent = lines[i + 1].indent;
                  for (j = n = 0, ref2 = indent - nextIndent; 0 <= ref2 ? n < ref2 : n > ref2; j = 0 <= ref2 ? ++n : --n) {
                    keys.pop();
                  }
                }
              } else if (/^---/.exec(line.text)) {
                langs[inTranslation][keys.join('.')] = buffer;
                inTranslation++;
                buffer = '';
              } else {
                buffer += line.text;
              }
            }
          }
        }
        return langs.map(function(json, i) {
          var lang;
          if (i === 0) {
            lang = 'en';
          } else if (i === 1) {
            lang = 'fr';
          }
          return fs.writeFileSync('./data/lang/' + e.split('.translations')[0] + '.' + lang + '.json', JSON.stringify(deepen(json), null, 2));
        });
      }
    });
    if (typeof cb === 'function') {
      return cb();
    }
  };

}).call(this);
